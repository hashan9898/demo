pipeline{
    agent any
    environment {
        PATH = "$PATH:/usr/share/maven"
    }
    stages{
       stage('GetCode'){
            steps{
                git 'https://github.com/hashan9898/demo.git'
                
            }
         }        
       stage('Build'){
            steps{
                //sh 'sudo docker network create springboot-mysql-net'
                sh 'sudo docker run --name mysqldb --network springboot-mysql-net -dit -p 3306:3306 -e MYSQL_ROOT_PASSWORD=local -e MYSQL_DATABASE=employeeDB mysql:5.7'
                sh 'mvn clean package'
            }
         }
        stage('SonarQube analysis') {
//    def scannerHome = tool 'SonarScanner 4.0';
        steps{
        withSonarQubeEnv(installationName:'sonarqube-9.6.1', credentialsId: 'jenkins-tokenss') {
        // If you have configured more than one global server connection, you can specify its name
//      sh "${scannerHome}/bin/sonar-scanner"
        sh "mvn sonar:sonar"
    }
        }
        }
        stage('Build docker image'){
            steps{
                sh 'sudo docker build -t docker-demo:2.0 .'
            }
         }
         stage('Build push image'){
            steps{
                script{
                    withCredentials([string(credentialsId: 'dockerhub-pwd', variable: 'dockerpwd')]) {
                        sh 'sudo docker login -u hashan9898 -p ${dockerpwd}'
    // some block
                    }
                    sh'sudo docker tag docker-demo:2.0 hashan9898/docker-demo:2.0'
                    sh 'sudo docker push hashan9898/docker-demo:2.0'
                }
            }
         }
		 stage('Run image same network'){
            steps{
                sh 'docker run --network springboot-mysql-net --name springboot-container -p 8080:8080 docker-demo:2.0'
                
            }
         }       
    }
}
